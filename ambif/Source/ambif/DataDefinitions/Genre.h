// Stefano Cherubin stefano1.cherubin@mail.polimi.it - except where otherwise stated

/** Static mapping genres to numbers. */

/* This is not so scalable 
 * and may not be defined 'good code' 
 * but should just work. */

#pragma once

#include "CustomUtils/CustomUtils.h"
#include "Genre.generated.h"

#define CHILDREN_MUSIC_STR "Children's Music"
#define NEW_AGE_STR "New Age"
#define HOLIDAY_STR "Holiday"
#define VOCAL_EASY_LISTENING_STR "Vocal/Easy Listening"
#define BLUES_STR "Blues"
#define COMEDY_SPOKEN_WORD_OTHER_STR "Comedy/SpokenWord/Other"
#define REGGAE_SKA_STR "Reggae"
#define WORLD_STR "World"
#define SOUNDTRACKS_CAST_ALBUMS_STR "Soundtracks"
#define JAZZ_STR "Jazz"
#define LATIN_STR "Latin"
#define CHRISTIAN_GOSPEL_STR "Christian/Gospel"
#define FOLK_STR "Folk"
#define COUNTRY_STR "Country"
#define R_B_SOUL_STR "R&B/Soul"
#define DANCE_ELECTRONIC_STR "Dance/Electronic"
#define METAL_STR "Metal"
#define HIP_HOP_RAP_STR "Hip-Hop/Rap"
#define POP_STR "Pop"
#define ROCK_STR "Rock"
#define ALTERNATIVE_INDIE_STR "Alternative/Indie"

#define NEW_AGENATURE_SOUNDS_STR "Nature Sounds"
#define NEW_AGENEW_AGE_INSTRUMENTAL_STR "New Age Instrumental"
#define NEW_AGEGLOBAL_FUSION_STR "Global Fusion"

#define VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE_STR "Cocktail/Lounge"

#define BLUESDELTA_BLUES_STR "Delta Blues"
#define BLUESCOUNTRY_BLUES_STR "Country Blues"
#define BLUESACOUSTIC_FOLK_BLUES_STR "Acoustic Blues"
#define BLUESCHICAGO_BLUES_STR "Chicago Blues"
#define BLUESCLASSIC_BLUES_STR "Classic Blues"
#define BLUESELECTRIC_BLUES_STR "Electric Blues"

#define COMEDY_SPOKEN_WORD_OTHERHORSPIELE_STR "Drama & Radio"
#define COMEDY_SPOKEN_WORD_OTHERNOVELTY_STR "Novelty"
#define COMEDY_SPOKEN_WORD_OTHERSTANDUP_STR "Standup"

#define REGGAE_SKAREGGAE_SKA_DANCEHALL_STR "Dancehall"
#define REGGAE_SKAREGGAE_SKA_DUB_STR "Dub"
#define REGGAE_SKAREGGAE_SKA_ROCKSTEADY_STR "Ska/Rocksteady"

#define WORLDASIA_STR "Asia"
#define WORLDAUSTRALIA_SOUTH_PACIFIC_STR "Australia/South Pacific"
#define WORLDWORLD_POP_STR "World Pop"
#define WORLDMIDDLE_EASTERN_STR "Middle Eastern"
#define WORLDSOUTH_AMERICA_STR "South America"
#define WORLDHAWAII_STR "Hawaii"
#define WORLDCELTIC_STR "Celtic"
#define WORLDAFRICA_STR "Africa"
#define WORLDCARIBBEAN_STR "Caribbean"
#define WORLDSOUTH_ASIA_STR "South Asia"
#define WORLDNORTH_AMERICA_STR "North America"
#define WORLDBRAZIL_STR "Brazil"
#define WORLDEUROPE_STR "Europe"

#define SOUNDTRACKS_CAST_ALBUMSFILM_SCORES_STR "Film Scores"
#define SOUNDTRACKS_CAST_ALBUMSMUSICALS_STR "Musicals"

#define JAZZFUSION_JAZZ_STR "Fusion"
#define JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV_STR "Avant Garde Jazz"
#define JAZZCONTEMPORARY_JAZZ_STR "Contemporary Jazz"
#define JAZZSMOOTH_JAZZ_STR "Smooth Jazz"
#define JAZZNEW_ORLEANS_JAZZ_STR "New Orleans Jazz"
#define JAZZSWING_STR "Swing"
#define JAZZLATIN_JAZZ_STR "Latin Jazz"
#define JAZZBOP_JAZZ_STR "Bop"
#define JAZZCOOL_WEST_COAST_JAZZ_STR "Cool/West Coast Jazz"
#define JAZZVOCALS_STR "Vocals"
#define JAZZBIG_BAND_STR "Big Band"

#define LATINREGGAETON_STR "Reggaeton"
#define LATINLATIN_ALTERNATIVE_STR "Latin Alternative"
#define LATINCUMBIA_STR "Cumbia"
#define LATINROCK_EN_ESPANOL_STR "Rock en Español"
#define LATINSAMBA_STR "Samba"
#define LATINREGIONAL_MEXICAN_STR "Regional Mexican"
#define LATINLATIN_POP_STR "Latin Pop"
#define LATINBRAZILIAN_MUSIC_STR "Brazilian Music"
#define LATINSALSA_Y_TROPICAL_STR "Salsa y Tropical"

#define CHRISTIAN_GOSPELCHRISTIAN_RAP_STR "Christian Rap"
#define CHRISTIAN_GOSPELPRAISE_WORSHIP_STR "Praise & Worship"
#define CHRISTIAN_GOSPELALT_CONTEMPORARY_CHRISTIAN_STR "Alt Contemporary Christian"
#define CHRISTIAN_GOSPELCCM_STR "CCM"
#define CHRISTIAN_GOSPELCOUNTRY_GOSPEL_STR "Country Gospel"
#define CHRISTIAN_GOSPELTRADITIONAL_GOSPEL_STR "Traditional Gospel"
#define CHRISTIAN_GOSPELSOUTHERN_GOSPEL_STR "Southern Gospel"

#define DANCE_ELECTRONICDUBSTEP_STR "Dubstep"
#define DANCE_ELECTRONICHARDCORE_STR "Hardcore"
#define DANCE_ELECTRONICBREAKBEAT_STR "Breakbeat"
#define DANCE_ELECTRONICJUNGLE_DRUM_BASS_STR "Jungle/Drum&Bass"
#define DANCE_ELECTRONICDOWNTEMPO_STR "Downtempo"
#define DANCE_ELECTRONICELECTRONICA_STR "Electronica"
#define DANCE_ELECTRONICHOUSE_STR "House"
#define DANCE_ELECTRONICTECHNO_STR "Techno"
#define DANCE_ELECTRONICTRANCE_STR "Trance"
#define DANCE_ELECTRONICAMBIENT_STR "Ambient"

#define METALINDUSTRIAL_STR "Industrial"
#define METALMETALCORE_STR "Metalcore"
#define METALPROGRESSIVE_METAL_STR "Progressive Metal"
#define METALDOOM_METAL_STR "Doom Metal"
#define METALTHRASH_STR "Thrash"
#define METALBLACK_DEATH_METAL_STR "Black/Death Metal"
#define METALHAIR_METAL_STR "Hair Metal"
#define METALALT_METAL_STR "Alt Metal"
#define METALCLASSIC_METAL_STR "Classic Metal"

#define FOLKNEO_FOLK_STR "Neo-Folk"
#define FOLKFOLK_ROCK_STR "Folk-Rock"
#define FOLKCELTIC_FOLK_STR "Celtic Folk"
#define FOLKCAJUN_ZYDECO_STR "Cajun & Zydeco"
#define FOLKACOUSTIC_STR "Acoustic"

#define COUNTRYNEW_TRADITIONAL_STR "New Traditional"
#define COUNTRYALT_COUNTRY_STR "Alt Country"
#define COUNTRYBLUEGRASS_STR "Bluegrass"
#define COUNTRYROCKABILLY_STR "Rockabilly"
#define COUNTRYCOUNTRY_POP_STR "Contemporary Country"
#define COUNTRYCLASSIC_COUNTRY_STR "Classic Country"

#define R_B_SOULURBAN_ADULT_CONTEMPORARY_STR "Urban Adult Contemporary"
#define R_B_SOULNEO_SOUL_STR "Neo-Soul"
#define R_B_SOULDISCO_STR "Disco"
#define R_B_SOULCONTEMPORARY_R_B_STR "Contemporary R&B"
#define R_B_SOULFUNK_STR "Funk"
#define R_B_SOULCLASSIC_SOUL_STR "Classic Soul"
#define R_B_SOULCLASSIC_R_B_STR "Classic R&B"
#define R_B_SOULDOO_WOP_STR "Doo-Wop"

#define HIP_HOP_RAPMIDWEST_HIP_HOP_STR "Midwest Hip-Hop"
#define HIP_HOP_RAPINSTRUMENTAL_HIP_HOP_STR "Instrumental Hip-Hop"
#define HIP_HOP_RAPSOUTHERN_HIP_HOP_STR "Southern Hip-Hop"
#define HIP_HOP_RAPHIP_HOP_90S_STR "'90s Hip-Hop"
#define HIP_HOP_RAPHIP_HOP_HITMAKERS_STR "Hip-Hop Hitmakers"
#define HIP_HOP_RAPWEST_COAST_HIP_HOP_STR "Indie/Underground Hip-Hop"
#define HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP_STR "West Coast Hip-Hop"
#define HIP_HOP_RAPHIP_HOP_80S_STR "'80s Hip-Hop"
#define HIP_HOP_RAPEAST_COAST_HIP_HOP_STR "East Coast Hip-Hop"
#define HIP_HOP_RAPHIP_HOP_00S_STR "'10s Hip-Hop"
#define HIP_HOP_RAPINTERNATIONAL_HIP_HOP_STR "'00s Hip-Hop"
#define HIP_HOP_RAPHIP_HOP_10S_STR "International Hip-Hop"
#define HIP_HOP_RAPOLD_SCHOOL_HIP_HOP_STR "Old School Hip-Hop"

#define POPPOP_00S_STR "'10s Pop"
#define POPPOP_90S_STR "'90s Pop"
#define POPPOP_10S_STR "'10s Pop"
#define POPPOP_80S_STR "'80s Pop"
#define POPDANCE_POP_STR "Dance Pop"
#define POPPOP_70S_STR "'70s Pop"
#define POPPOP_60S_STR "'60s Pop"
#define POPADULT_CONTEMPORARY_STR "Adult Contemporary"
#define POPTEEN_POP_STR "Teen Pop"
#define POPPOP_50S_STR "'50s Pop"

#define ROCKROCK_ROLL_10S_STR "'10s Rock"
#define ROCKROCK_ROLL_00S_STR "'10s Rock"
#define ROCKROCK_ROLL_90S_STR "'90s Rock"
#define ROCKROCK_ROLL_80S_STR "'80s Rock"
#define ROCKJAM_ROCK_STR "Jam Rock"
#define ROCKPROGRESSIVE_ART_ROCK_STR "Progressive/Art Rock"
#define ROCKHARD_ROCK_STR "Hard Rock"
#define ROCKCLASSIC_ROCK_STR "Classic Rock"
#define ROCKROCK_ROLL_70S_STR "'70s Rock"
#define ROCKSURF_STR "Surf"
#define ROCKROCK_ROLL_60S_STR "'60s Rock"
#define ROCKPSYCHEDELIC_ROCK_STR "Psychedelic Rock"
#define ROCKROCK_N_ROLL_50S_STR "'50s Rock"
#define ROCKSINGER_SONGWRITER_STR "Singer-Songwriter"

#define ALTERNATIVE_INDIEALTERNATIVE_10S_STR "'10s Alternative"
#define ALTERNATIVE_INDIEEMO_HARDCORE_STR "Emo/Hardcore"
#define ALTERNATIVE_INDIEALTERNATIVE_90S_STR "'90s Alternative"
#define ALTERNATIVE_INDIEALTERNATIVE_00S_STR "'10s Alternative"
#define ALTERNATIVE_INDIEALTERNATIVE_80S_STR "'80s Alternative"
#define ALTERNATIVE_INDIEINDIE_STR "Indie"
#define ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK_STR "Brit Pop/Brit Rock"
#define ALTERNATIVE_INDIEGOTH_INDUSTRIAL_STR "Goth/Industrial"
#define ALTERNATIVE_INDIENEW_WAVE_POST_PUNK_STR "New Wave/Post-Punk"
#define ALTERNATIVE_INDIEELECTROPOP_STR "Electropop"
#define ALTERNATIVE_INDIEPUNK_STR "Punk"

UENUM(BlueprintType)
namespace Genre{
	enum Type
	{
		NO_GENRE					UMETA(Displayname = "<No Genre Selected>"),
		//--------------------------------GENRES--------------------------------
		CHILDREN_MUSIC 				UMETA(DisplayName = CHILDREN_MUSIC_STR),
		NEW_AGE 					UMETA(DisplayName = NEW_AGE_STR),
		HOLIDAY 					UMETA(DisplayName = HOLIDAY_STR),
		VOCAL_EASY_LISTENING		UMETA(DisplayName = VOCAL_EASY_LISTENING_STR),
		BLUES 						UMETA(DisplayName = BLUES_STR),
		COMEDY_SPOKEN_WORD_OTHER 	UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHER_STR),
		REGGAE_SKA 					UMETA(DisplayName = REGGAE_SKA_STR),
		WORLD 						UMETA(DisplayName = WORLD_STR),
		SOUNDTRACKS_CAST_ALBUMS 	UMETA(DisplayName = SOUNDTRACKS_CAST_ALBUMS_STR),
		JAZZ 						UMETA(DisplayName = JAZZ_STR),
		LATIN 						UMETA(DisplayName = LATIN_STR),
		CHRISTIAN_GOSPEL 			UMETA(DisplayName = CHRISTIAN_GOSPEL_STR),
		FOLK 						UMETA(DisplayName = FOLK_STR),
		COUNTRY 					UMETA(DisplayName = COUNTRY_STR),
		R_B_SOUL 					UMETA(DisplayName = R_B_SOUL_STR),
		DANCE_ELECTRONIC 			UMETA(DisplayName = DANCE_ELECTRONIC_STR),
		METAL 						UMETA(DisplayName = METAL_STR),
		HIP_HOP_RAP 				UMETA(DisplayName = HIP_HOP_RAP_STR),
		POP 						UMETA(DisplayName = POP_STR),
		ROCK 						UMETA(DisplayName = ROCK_STR),
		ALTERNATIVE_INDIE 			UMETA(DisplayName = ALTERNATIVE_INDIE_STR),

		//--------------------------------SUBGENRES--------------------------------
		//new age
		NEW_AGENATURE_SOUNDS			UMETA(DisplayName = NEW_AGENATURE_SOUNDS_STR),
		NEW_AGENEW_AGE_INSTRUMENTAL		UMETA(DisplayName = NEW_AGENEW_AGE_INSTRUMENTAL_STR),
		NEW_AGEGLOBAL_FUSION			UMETA(DisplayName = NEW_AGEGLOBAL_FUSION_STR),

		//vocal/easy listening
		VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE UMETA(DisplayName = VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE_STR),

		//blues
		BLUESDELTA_BLUES				UMETA(DisplayName = BLUESDELTA_BLUES_STR),
		BLUESCOUNTRY_BLUES				UMETA(DisplayName = BLUESCOUNTRY_BLUES_STR),
		BLUESACOUSTIC_FOLK_BLUES		UMETA(DisplayName = BLUESACOUSTIC_FOLK_BLUES_STR),
		BLUESCHICAGO_BLUES				UMETA(DisplayName = BLUESCHICAGO_BLUES_STR),
		BLUESCLASSIC_BLUES				UMETA(DisplayName = BLUESCLASSIC_BLUES_STR),
		BLUESELECTRIC_BLUES				UMETA(DisplayName = BLUESELECTRIC_BLUES_STR),

		//comedy
		COMEDY_SPOKEN_WORD_OTHERHORSPIELE	UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHERHORSPIELE_STR),
		COMEDY_SPOKEN_WORD_OTHERNOVELTY		UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHERNOVELTY_STR),
		COMEDY_SPOKEN_WORD_OTHERSTANDUP		UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHERSTANDUP_STR),

		//reggae ska
		REGGAE_SKAREGGAE_SKA_DANCEHALL		UMETA(DisplayName = REGGAE_SKAREGGAE_SKA_DANCEHALL_STR),
		REGGAE_SKAREGGAE_SKA_DUB			UMETA(DisplayName = REGGAE_SKAREGGAE_SKA_DUB_STR),
		REGGAE_SKAREGGAE_SKA_ROCKSTEADY		UMETA(DisplayName = REGGAE_SKAREGGAE_SKA_ROCKSTEADY_STR),

		//world
		WORLDASIA							UMETA(DisplayName = WORLDASIA_STR),
		WORLDAUSTRALIA_SOUTH_PACIFIC		UMETA(DisplayName = WORLDAUSTRALIA_SOUTH_PACIFIC_STR),
		WORLDWORLD_POP						UMETA(DisplayName = WORLDWORLD_POP_STR),
		WORLDMIDDLE_EASTERN					UMETA(DisplayName = WORLDMIDDLE_EASTERN_STR),
		WORLDSOUTH_AMERICA					UMETA(DisplayName = WORLDSOUTH_AMERICA_STR),
		WORLDHAWAII							UMETA(DisplayName = WORLDHAWAII_STR),
		WORLDCELTIC							UMETA(DisplayName = WORLDCELTIC_STR),
		WORLDAFRICA							UMETA(DisplayName = WORLDAFRICA_STR),
		WORLDCARIBBEAN						UMETA(DisplayName = WORLDCARIBBEAN_STR),
		WORLDSOUTH_ASIA						UMETA(DisplayName = WORLDSOUTH_ASIA_STR),
		WORLDNORTH_AMERICA					UMETA(DisplayName = WORLDNORTH_AMERICA_STR),
		WORLDBRAZIL							UMETA(DisplayName = WORLDBRAZIL_STR),
		WORLDEUROPE							UMETA(DisplayName = WORLDEUROPE_STR),

		//soundtracks
		SOUNDTRACKS_CAST_ALBUMSFILM_SCORES	UMETA(DisplayName = SOUNDTRACKS_CAST_ALBUMSFILM_SCORES_STR),
		SOUNDTRACKS_CAST_ALBUMSMUSICALS		UMETA(DisplayName = SOUNDTRACKS_CAST_ALBUMSMUSICALS_STR),

		//jazz
		JAZZFUSION_JAZZ						UMETA(DisplayName = JAZZFUSION_JAZZ_STR),
		JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV	UMETA(DisplayName = JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV_STR),
		JAZZCONTEMPORARY_JAZZ				UMETA(DisplayName = JAZZCONTEMPORARY_JAZZ_STR),
		JAZZSMOOTH_JAZZ						UMETA(DisplayName = JAZZSMOOTH_JAZZ_STR),
		JAZZNEW_ORLEANS_JAZZ				UMETA(DisplayName = JAZZNEW_ORLEANS_JAZZ_STR),
		JAZZSWING							UMETA(DisplayName = JAZZSWING_STR),
		JAZZLATIN_JAZZ						UMETA(DisplayName = JAZZLATIN_JAZZ_STR),
		JAZZBOP_JAZZ						UMETA(DisplayName = JAZZBOP_JAZZ_STR),
		JAZZCOOL_WEST_COAST_JAZZ			UMETA(DisplayName = JAZZCOOL_WEST_COAST_JAZZ_STR),
		JAZZVOCALS							UMETA(DisplayName = JAZZVOCALS_STR),
		JAZZBIG_BAND						UMETA(DisplayName = JAZZBIG_BAND_STR),

		//folk
		FOLKNEO_FOLK						UMETA(DisplayName = FOLKNEO_FOLK_STR),
		FOLKFOLK_ROCK						UMETA(DisplayName = FOLKFOLK_ROCK_STR),
		FOLKCELTIC_FOLK						UMETA(DisplayName = FOLKCELTIC_FOLK_STR),
		FOLKCAJUN_ZYDECO					UMETA(DisplayName = FOLKCAJUN_ZYDECO_STR),
		FOLKACOUSTIC						UMETA(DisplayName = FOLKACOUSTIC_STR),

		//country
		COUNTRYNEW_TRADITIONAL				UMETA(DisplayName = COUNTRYNEW_TRADITIONAL_STR),
		COUNTRYALT_COUNTRY					UMETA(DisplayName = COUNTRYALT_COUNTRY_STR),
		COUNTRYBLUEGRASS					UMETA(DisplayName = COUNTRYBLUEGRASS_STR),
		COUNTRYROCKABILLY					UMETA(DisplayName = COUNTRYROCKABILLY_STR),
		COUNTRYCOUNTRY_POP					UMETA(DisplayName = COUNTRYCOUNTRY_POP_STR),
		COUNTRYCLASSIC_COUNTRY				UMETA(DisplayName = COUNTRYCLASSIC_COUNTRY_STR),

		//R&B soul
		R_B_SOULURBAN_ADULT_CONTEMPORARY	UMETA(DisplayName = R_B_SOULURBAN_ADULT_CONTEMPORARY_STR),
		R_B_SOULNEO_SOUL					UMETA(DisplayName = R_B_SOULNEO_SOUL_STR),
		R_B_SOULDISCO						UMETA(DisplayName = R_B_SOULDISCO_STR),
		R_B_SOULCONTEMPORARY_R_B			UMETA(DisplayName = R_B_SOULCONTEMPORARY_R_B_STR),
		R_B_SOULFUNK						UMETA(DisplayName = R_B_SOULFUNK_STR),
		R_B_SOULCLASSIC_SOUL				UMETA(DisplayName = R_B_SOULCLASSIC_SOUL_STR),
		R_B_SOULCLASSIC_R_B					UMETA(DisplayName = R_B_SOULCLASSIC_R_B_STR),
		R_B_SOULDOO_WOP						UMETA(DisplayName = R_B_SOULDOO_WOP_STR),

		//dance/electronic
		DANCE_ELECTRONICDUBSTEP				UMETA(DisplayName = DANCE_ELECTRONICDUBSTEP_STR),
		DANCE_ELECTRONICHARDCORE			UMETA(DisplayName = DANCE_ELECTRONICHARDCORE_STR),
		DANCE_ELECTRONICBREAKBEAT			UMETA(DisplayName = DANCE_ELECTRONICBREAKBEAT_STR),
		DANCE_ELECTRONICJUNGLE_DRUM_BASS	UMETA(DisplayName = DANCE_ELECTRONICJUNGLE_DRUM_BASS_STR),
		DANCE_ELECTRONICDOWNTEMPO			UMETA(DisplayName = DANCE_ELECTRONICDOWNTEMPO_STR),
		DANCE_ELECTRONICELECTRONICA			UMETA(DisplayName = DANCE_ELECTRONICELECTRONICA_STR),
		DANCE_ELECTRONICHOUSE				UMETA(DisplayName = DANCE_ELECTRONICHOUSE_STR),
		DANCE_ELECTRONICTECHNO				UMETA(DisplayName = DANCE_ELECTRONICTECHNO_STR),
		DANCE_ELECTRONICTRANCE				UMETA(DisplayName = DANCE_ELECTRONICTRANCE_STR),
		DANCE_ELECTRONICAMBIENT				UMETA(DisplayName = DANCE_ELECTRONICAMBIENT_STR),

		//metal
		METALINDUSTRIAL						UMETA(DisplayName = METALINDUSTRIAL_STR),
		METALMETALCORE						UMETA(DisplayName = METALMETALCORE_STR),
		METALPROGRESSIVE_METAL				UMETA(DisplayName = METALPROGRESSIVE_METAL_STR),
		METALDOOM_METAL						UMETA(DisplayName = METALDOOM_METAL_STR),
		METALTHRASH							UMETA(DisplayName = METALTHRASH_STR),
		METALBLACK_DEATH_METAL				UMETA(DisplayName = METALBLACK_DEATH_METAL_STR),
		METALHAIR_METAL						UMETA(DisplayName = METALHAIR_METAL_STR),
		METALALT_METAL						UMETA(DisplayName = METALALT_METAL_STR),
		METALCLASSIC_METAL					UMETA(DisplayName = METALCLASSIC_METAL_STR),

		//hip-hop
		HIP_HOP_RAPMIDWEST_HIP_HOP			UMETA(DisplayName = HIP_HOP_RAPMIDWEST_HIP_HOP_STR),
		HIP_HOP_RAPINSTRUMENTAL_HIP_HOP		UMETA(DisplayName = HIP_HOP_RAPINSTRUMENTAL_HIP_HOP_STR),
		HIP_HOP_RAPSOUTHERN_HIP_HOP			UMETA(DisplayName = HIP_HOP_RAPSOUTHERN_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_90S				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_90S_STR),
		HIP_HOP_RAPHIP_HOP_HITMAKERS		UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_HITMAKERS_STR),
		HIP_HOP_RAPWEST_COAST_HIP_HOP		UMETA(DisplayName = HIP_HOP_RAPWEST_COAST_HIP_HOP_STR),
		HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP UMETA(DisplayName = HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_80S				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_80S_STR),
		HIP_HOP_RAPEAST_COAST_HIP_HOP		UMETA(DisplayName = HIP_HOP_RAPEAST_COAST_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_00S				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_00S_STR),
		HIP_HOP_RAPINTERNATIONAL_HIP_HOP	UMETA(DisplayName = HIP_HOP_RAPINTERNATIONAL_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_10S				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_10S_STR),
		HIP_HOP_RAPOLD_SCHOOL_HIP_HOP		UMETA(DisplayName = HIP_HOP_RAPOLD_SCHOOL_HIP_HOP_STR),

		//pop
		POPPOP_00S							UMETA(DisplayName = POPPOP_00S_STR),
		POPPOP_90S							UMETA(DisplayName = POPPOP_90S_STR),
		POPPOP_10S							UMETA(DisplayName = POPPOP_10S_STR),
		POPPOP_80S							UMETA(DisplayName = POPPOP_80S_STR),
		POPDANCE_POP						UMETA(DisplayName = POPDANCE_POP_STR),
		POPPOP_70S							UMETA(DisplayName = POPPOP_70S_STR),
		POPPOP_60S							UMETA(DisplayName = POPPOP_60S_STR),
		POPADULT_CONTEMPORARY				UMETA(DisplayName = POPADULT_CONTEMPORARY_STR),
		POPTEEN_POP							UMETA(DisplayName = POPTEEN_POP_STR),
		POPPOP_50S							UMETA(DisplayName = POPPOP_50S_STR),

		//rock
		ROCKROCK_ROLL_10S					UMETA(DisplayName = ROCKROCK_ROLL_10S_STR),
		ROCKROCK_ROLL_00S					UMETA(DisplayName = ROCKROCK_ROLL_00S_STR),
		ROCKROCK_ROLL_90S					UMETA(DisplayName = ROCKROCK_ROLL_90S_STR),
		ROCKROCK_ROLL_80S					UMETA(DisplayName = ROCKROCK_ROLL_80S_STR),
		ROCKJAM_ROCK						UMETA(DisplayName = ROCKJAM_ROCK_STR),
		ROCKPROGRESSIVE_ART_ROCK			UMETA(DisplayName = ROCKPROGRESSIVE_ART_ROCK_STR),
		ROCKHARD_ROCK						UMETA(DisplayName = ROCKHARD_ROCK_STR),
		ROCKCLASSIC_ROCK					UMETA(DisplayName = ROCKCLASSIC_ROCK_STR),
		ROCKROCK_ROLL_70S					UMETA(DisplayName = ROCKROCK_ROLL_70S_STR),
		ROCKSURF							UMETA(DisplayName = ROCKSURF_STR),
		ROCKROCK_ROLL_60S					UMETA(DisplayName = ROCKROCK_ROLL_60S_STR),
		ROCKPSYCHEDELIC_ROCK				UMETA(DisplayName = ROCKPSYCHEDELIC_ROCK_STR),
		ROCKROCK_N_ROLL_50S					UMETA(DisplayName = ROCKROCK_N_ROLL_50S_STR),
		ROCKSINGER_SONGWRITER				UMETA(DisplayName = ROCKSINGER_SONGWRITER_STR),

		//alternative/indie
		ALTERNATIVE_INDIEALTERNATIVE_10S	UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_10S_STR),
		ALTERNATIVE_INDIEEMO_HARDCORE		UMETA(DisplayName = ALTERNATIVE_INDIEEMO_HARDCORE_STR),
		ALTERNATIVE_INDIEALTERNATIVE_90S	UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_90S_STR),
		ALTERNATIVE_INDIEALTERNATIVE_00S	UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_00S_STR),
		ALTERNATIVE_INDIEALTERNATIVE_80S	UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_80S_STR),
		ALTERNATIVE_INDIEINDIE				UMETA(DisplayName = ALTERNATIVE_INDIEINDIE_STR),
		ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK	UMETA(DisplayName = ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK_STR),
		ALTERNATIVE_INDIEGOTH_INDUSTRIAL	UMETA(DisplayName = ALTERNATIVE_INDIEGOTH_INDUSTRIAL_STR),
		ALTERNATIVE_INDIENEW_WAVE_POST_PUNK UMETA(DisplayName = ALTERNATIVE_INDIENEW_WAVE_POST_PUNK_STR),
		ALTERNATIVE_INDIEELECTROPOP			UMETA(DisplayName = ALTERNATIVE_INDIEELECTROPOP_STR),
		ALTERNATIVE_INDIEPUNK				UMETA(DisplayName = ALTERNATIVE_INDIEPUNK_STR),
	};
}

namespace OnlyGenre{
	enum Type
	{
		NO_GENRE						UMETA(Displayname = "<No Genre Selected>"),
		//--------------------------------GENRES--------------------------------
		CHILDREN_MUSIC 				UMETA(DisplayName = CHILDREN_MUSIC_STR),
		NEW_AGE 					UMETA(DisplayName = NEW_AGE_STR),
		HOLIDAY 					UMETA(DisplayName = HOLIDAY_STR),
		VOCAL_EASY_LISTENING			UMETA(DisplayName = VOCAL_EASY_LISTENING_STR),
		BLUES 						UMETA(DisplayName = BLUES_STR),
		COMEDY_SPOKEN_WORD_OTHER 	UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHER_STR),
		REGGAE_SKA 					UMETA(DisplayName = REGGAE_SKA_STR),
		WORLD 						UMETA(DisplayName = WORLD_STR),
		SOUNDTRACKS_CAST_ALBUMS 	UMETA(DisplayName = SOUNDTRACKS_CAST_ALBUMS_STR),
		JAZZ 						UMETA(DisplayName = JAZZ_STR),
		LATIN 						UMETA(DisplayName = LATIN_STR),
		CHRISTIAN_GOSPEL 			UMETA(DisplayName = CHRISTIAN_GOSPEL_STR),
		FOLK 						UMETA(DisplayName = FOLK_STR),
		COUNTRY 					UMETA(DisplayName = COUNTRY_STR),
		R_B_SOUL 					UMETA(DisplayName = R_B_SOUL_STR),
		DANCE_ELECTRONIC 			UMETA(DisplayName = DANCE_ELECTRONIC_STR),
		METAL 						UMETA(DisplayName = METAL_STR),
		HIP_HOP_RAP 				UMETA(DisplayName = HIP_HOP_RAP_STR),
		POP 						UMETA(DisplayName = POP_STR),
		ROCK 						UMETA(DisplayName = ROCK_STR),
		ALTERNATIVE_INDIE 			UMETA(DisplayName = ALTERNATIVE_INDIE_STR),
	};
}
//--------------------------------SUBGENRES--------------------------------							
namespace SubGenreNewAge{
	enum Type
	{
		//new age							
		NEW_AGENATURE_SOUNDS = Genre::NEW_AGENATURE_SOUNDS 		UMETA(DisplayName = NEW_AGENATURE_SOUNDS_STR),
		NEW_AGENEW_AGE_INSTRUMENTAL = Genre::NEW_AGENEW_AGE_INSTRUMENTAL UMETA(DisplayName = NEW_AGENEW_AGE_INSTRUMENTAL_STR),
		NEW_AGEGLOBAL_FUSION = Genre::NEW_AGEGLOBAL_FUSION 		UMETA(DisplayName = NEW_AGEGLOBAL_FUSION_STR),
	};
}
namespace SubGenreVocalEasy{
	enum Type
	{
		//vocal/easy listening							
		VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE = Genre::VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE UMETA(DisplayName = VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE_STR),
	};
}
namespace SubGenreBlues{
	enum Type
	{
		//blues							
		BLUESDELTA_BLUES = Genre::BLUESDELTA_BLUES 		UMETA(DisplayName = BLUESDELTA_BLUES_STR),
		BLUESCOUNTRY_BLUES = Genre::BLUESCOUNTRY_BLUES 		UMETA(DisplayName = BLUESCOUNTRY_BLUES_STR),
		BLUESACOUSTIC_FOLK_BLUES = Genre::BLUESACOUSTIC_FOLK_BLUES UMETA(DisplayName = BLUESACOUSTIC_FOLK_BLUES_STR),
		BLUESCHICAGO_BLUES = Genre::BLUESCHICAGO_BLUES 		UMETA(DisplayName = BLUESCHICAGO_BLUES_STR),
		BLUESCLASSIC_BLUES = Genre::BLUESCLASSIC_BLUES 		UMETA(DisplayName = BLUESCLASSIC_BLUES_STR),
		BLUESELECTRIC_BLUES = Genre::BLUESELECTRIC_BLUES 		UMETA(DisplayName = BLUESELECTRIC_BLUES_STR),
	};
}
namespace SubGenreComedy{
	enum Type
	{
		//comedy							
		COMEDY_SPOKEN_WORD_OTHERHORSPIELE = Genre::COMEDY_SPOKEN_WORD_OTHERHORSPIELE UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHERHORSPIELE_STR),
		COMEDY_SPOKEN_WORD_OTHERNOVELTY = Genre::COMEDY_SPOKEN_WORD_OTHERNOVELTY UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHERNOVELTY_STR),
		COMEDY_SPOKEN_WORD_OTHERSTANDUP = Genre::COMEDY_SPOKEN_WORD_OTHERSTANDUP UMETA(DisplayName = COMEDY_SPOKEN_WORD_OTHERSTANDUP_STR),
	};
}
namespace SubGenreRaggae{
	enum Type
	{
		//reggae ska							
		REGGAE_SKAREGGAE_SKA_DANCEHALL = Genre::REGGAE_SKAREGGAE_SKA_DANCEHALL UMETA(DisplayName = REGGAE_SKAREGGAE_SKA_DANCEHALL_STR),
		REGGAE_SKAREGGAE_SKA_DUB = Genre::REGGAE_SKAREGGAE_SKA_DUB 	UMETA(DisplayName = REGGAE_SKAREGGAE_SKA_DUB_STR),
		REGGAE_SKAREGGAE_SKA_ROCKSTEADY = Genre::REGGAE_SKAREGGAE_SKA_ROCKSTEADY UMETA(DisplayName = REGGAE_SKAREGGAE_SKA_ROCKSTEADY_STR),
	};
}
namespace SubGenreWorld{
	enum Type
	{
		//world							
		WORLDASIA = Genre::WORLDASIA 					UMETA(DisplayName = WORLDASIA_STR),
		WORLDAUSTRALIA_SOUTH_PACIFIC = Genre::WORLDAUSTRALIA_SOUTH_PACIFIC UMETA(DisplayName = WORLDAUSTRALIA_SOUTH_PACIFIC_STR),
		WORLDWORLD_POP = Genre::WORLDWORLD_POP 				UMETA(DisplayName = WORLDWORLD_POP_STR),
		WORLDMIDDLE_EASTERN = Genre::WORLDMIDDLE_EASTERN 			UMETA(DisplayName = WORLDMIDDLE_EASTERN_STR),
		WORLDSOUTH_AMERICA = Genre::WORLDSOUTH_AMERICA 			UMETA(DisplayName = WORLDSOUTH_AMERICA_STR),
		WORLDHAWAII = Genre::WORLDHAWAII 					UMETA(DisplayName = WORLDHAWAII_STR),
		WORLDCELTIC = Genre::WORLDCELTIC 					UMETA(DisplayName = WORLDCELTIC_STR),
		WORLDAFRICA = Genre::WORLDAFRICA 					UMETA(DisplayName = WORLDAFRICA_STR),
		WORLDCARIBBEAN = Genre::WORLDCARIBBEAN 				UMETA(DisplayName = WORLDCARIBBEAN_STR),
		WORLDSOUTH_ASIA = Genre::WORLDSOUTH_ASIA 				UMETA(DisplayName = WORLDSOUTH_ASIA_STR),
		WORLDNORTH_AMERICA = Genre::WORLDNORTH_AMERICA 			UMETA(DisplayName = WORLDNORTH_AMERICA_STR),
		WORLDBRAZIL = Genre::WORLDBRAZIL 					UMETA(DisplayName = WORLDBRAZIL_STR),
		WORLDEUROPE = Genre::WORLDEUROPE 					UMETA(DisplayName = WORLDEUROPE_STR),
	};
}
namespace SubGenreSoundtracks{
	enum Type
	{
		//soundtracks							
		SOUNDTRACKS_CAST_ALBUMSFILM_SCORES = Genre::SOUNDTRACKS_CAST_ALBUMSFILM_SCORES UMETA(DisplayName = SOUNDTRACKS_CAST_ALBUMSFILM_SCORES_STR),
		SOUNDTRACKS_CAST_ALBUMSMUSICALS = Genre::SOUNDTRACKS_CAST_ALBUMSMUSICALS 	UMETA(DisplayName = SOUNDTRACKS_CAST_ALBUMSMUSICALS_STR),
	};
}
namespace SubGenreJazz{
	enum Type
	{
		//jazz							
		JAZZFUSION_JAZZ = Genre::JAZZFUSION_JAZZ 				UMETA(DisplayName = JAZZFUSION_JAZZ_STR),
		JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV = Genre::JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV UMETA(DisplayName = JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV_STR),
		JAZZCONTEMPORARY_JAZZ = Genre::JAZZCONTEMPORARY_JAZZ 			UMETA(DisplayName = JAZZCONTEMPORARY_JAZZ_STR),
		JAZZSMOOTH_JAZZ = Genre::JAZZSMOOTH_JAZZ 				UMETA(DisplayName = JAZZSMOOTH_JAZZ_STR),
		JAZZNEW_ORLEANS_JAZZ = Genre::JAZZNEW_ORLEANS_JAZZ 			UMETA(DisplayName = JAZZNEW_ORLEANS_JAZZ_STR),
		JAZZSWING = Genre::JAZZSWING 						UMETA(DisplayName = JAZZSWING_STR),
		JAZZLATIN_JAZZ = Genre::JAZZLATIN_JAZZ 				UMETA(DisplayName = JAZZLATIN_JAZZ_STR),
		JAZZBOP_JAZZ = Genre::JAZZBOP_JAZZ 					UMETA(DisplayName = JAZZBOP_JAZZ_STR),
		JAZZCOOL_WEST_COAST_JAZZ = Genre::JAZZCOOL_WEST_COAST_JAZZ 		UMETA(DisplayName = JAZZCOOL_WEST_COAST_JAZZ_STR),
		JAZZVOCALS = Genre::JAZZVOCALS 					UMETA(DisplayName = JAZZVOCALS_STR),
		JAZZBIG_BAND = Genre::JAZZBIG_BAND 					UMETA(DisplayName = JAZZBIG_BAND_STR),
	};
}
namespace SubGenreFolk{
	enum Type
	{
		//folk							
		FOLKNEO_FOLK = Genre::FOLKNEO_FOLK 											UMETA(DisplayName = FOLKNEO_FOLK_STR),
		FOLKFOLK_ROCK = Genre::FOLKFOLK_ROCK 										UMETA(DisplayName = FOLKFOLK_ROCK_STR),
		FOLKCELTIC_FOLK = Genre::FOLKCELTIC_FOLK 									UMETA(DisplayName = FOLKCELTIC_FOLK_STR),
		FOLKCAJUN_ZYDECO = Genre::FOLKCAJUN_ZYDECO 									UMETA(DisplayName = FOLKCAJUN_ZYDECO_STR),
		FOLKACOUSTIC = Genre::FOLKACOUSTIC 											UMETA(DisplayName = FOLKACOUSTIC_STR),
	};
}
namespace SubGenreCountry{
	enum Type
	{
		//country							
		COUNTRYNEW_TRADITIONAL = Genre::COUNTRYNEW_TRADITIONAL 						UMETA(DisplayName = COUNTRYNEW_TRADITIONAL_STR),
		COUNTRYALT_COUNTRY = Genre::COUNTRYALT_COUNTRY 								UMETA(DisplayName = COUNTRYALT_COUNTRY_STR),
		COUNTRYBLUEGRASS = Genre::COUNTRYBLUEGRASS 									UMETA(DisplayName = COUNTRYBLUEGRASS_STR),
		COUNTRYROCKABILLY = Genre::COUNTRYROCKABILLY 								UMETA(DisplayName = COUNTRYROCKABILLY_STR),
		COUNTRYCOUNTRY_POP = Genre::COUNTRYCOUNTRY_POP 								UMETA(DisplayName = COUNTRYCOUNTRY_POP_STR),
		COUNTRYCLASSIC_COUNTRY = Genre::COUNTRYCLASSIC_COUNTRY 						UMETA(DisplayName = COUNTRYCLASSIC_COUNTRY_STR),
	};
}
namespace SubGenreRBSoul{
	enum Type
	{
		//R&B soul							
		R_B_SOULURBAN_ADULT_CONTEMPORARY = Genre::R_B_SOULURBAN_ADULT_CONTEMPORARY UMETA(DisplayName = R_B_SOULURBAN_ADULT_CONTEMPORARY_STR),
		R_B_SOULNEO_SOUL = Genre::R_B_SOULNEO_SOUL 				UMETA(DisplayName = R_B_SOULNEO_SOUL_STR),
		R_B_SOULDISCO = Genre::R_B_SOULDISCO 					UMETA(DisplayName = R_B_SOULDISCO_STR),
		R_B_SOULCONTEMPORARY_R_B = Genre::R_B_SOULCONTEMPORARY_R_B 		UMETA(DisplayName = R_B_SOULCONTEMPORARY_R_B_STR),
		R_B_SOULFUNK = Genre::R_B_SOULFUNK 					UMETA(DisplayName = R_B_SOULFUNK_STR),
		R_B_SOULCLASSIC_SOUL = Genre::R_B_SOULCLASSIC_SOUL 			UMETA(DisplayName = R_B_SOULCLASSIC_SOUL_STR),
		R_B_SOULCLASSIC_R_B = Genre::R_B_SOULCLASSIC_R_B 			UMETA(DisplayName = R_B_SOULCLASSIC_R_B_STR),
		R_B_SOULDOO_WOP = Genre::R_B_SOULDOO_WOP 				UMETA(DisplayName = R_B_SOULDOO_WOP_STR),
	};
}
namespace SubGenreDanceElectronic{
	enum Type
	{
		//dance/electronic							
		DANCE_ELECTRONICDUBSTEP = Genre::DANCE_ELECTRONICDUBSTEP 		UMETA(DisplayName = DANCE_ELECTRONICDUBSTEP_STR),
		DANCE_ELECTRONICHARDCORE = Genre::DANCE_ELECTRONICHARDCORE 		UMETA(DisplayName = DANCE_ELECTRONICHARDCORE_STR),
		DANCE_ELECTRONICBREAKBEAT = Genre::DANCE_ELECTRONICBREAKBEAT 		UMETA(DisplayName = DANCE_ELECTRONICBREAKBEAT_STR),
		DANCE_ELECTRONICJUNGLE_DRUM_BASS = Genre::DANCE_ELECTRONICJUNGLE_DRUM_BASS UMETA(DisplayName = DANCE_ELECTRONICJUNGLE_DRUM_BASS_STR),
		DANCE_ELECTRONICDOWNTEMPO = Genre::DANCE_ELECTRONICDOWNTEMPO 		UMETA(DisplayName = DANCE_ELECTRONICDOWNTEMPO_STR),
		DANCE_ELECTRONICELECTRONICA = Genre::DANCE_ELECTRONICELECTRONICA 	UMETA(DisplayName = DANCE_ELECTRONICELECTRONICA_STR),
		DANCE_ELECTRONICHOUSE = Genre::DANCE_ELECTRONICHOUSE 			UMETA(DisplayName = DANCE_ELECTRONICHOUSE_STR),
		DANCE_ELECTRONICTECHNO = Genre::DANCE_ELECTRONICTECHNO 		UMETA(DisplayName = DANCE_ELECTRONICTECHNO_STR),
		DANCE_ELECTRONICTRANCE = Genre::DANCE_ELECTRONICTRANCE 		UMETA(DisplayName = DANCE_ELECTRONICTRANCE_STR),
		DANCE_ELECTRONICAMBIENT = Genre::DANCE_ELECTRONICAMBIENT 		UMETA(DisplayName = DANCE_ELECTRONICAMBIENT_STR),
	};
}
namespace SubGenreMetal{
	enum Type
	{
		//metal							
		METALINDUSTRIAL = Genre::METALINDUSTRIAL 				UMETA(DisplayName = METALINDUSTRIAL_STR),
		METALMETALCORE = Genre::METALMETALCORE 				UMETA(DisplayName = METALMETALCORE_STR),
		METALPROGRESSIVE_METAL = Genre::METALPROGRESSIVE_METAL 		UMETA(DisplayName = METALPROGRESSIVE_METAL_STR),
		METALDOOM_METAL = Genre::METALDOOM_METAL 				UMETA(DisplayName = METALDOOM_METAL_STR),
		METALTHRASH = Genre::METALTHRASH 					UMETA(DisplayName = METALTHRASH_STR),
		METALBLACK_DEATH_METAL = Genre::METALBLACK_DEATH_METAL 		UMETA(DisplayName = METALBLACK_DEATH_METAL_STR),
		METALHAIR_METAL = Genre::METALHAIR_METAL 				UMETA(DisplayName = METALHAIR_METAL_STR),
		METALALT_METAL = Genre::METALALT_METAL 				UMETA(DisplayName = METALALT_METAL_STR),
		METALCLASSIC_METAL = Genre::METALCLASSIC_METAL 			UMETA(DisplayName = METALCLASSIC_METAL_STR),
	};
}
namespace SubGenreHipHop{
	enum Type
	{
		//hip-hop							
		HIP_HOP_RAPMIDWEST_HIP_HOP = Genre::HIP_HOP_RAPMIDWEST_HIP_HOP 			UMETA(DisplayName = HIP_HOP_RAPMIDWEST_HIP_HOP_STR),
		HIP_HOP_RAPINSTRUMENTAL_HIP_HOP = Genre::HIP_HOP_RAPINSTRUMENTAL_HIP_HOP 		UMETA(DisplayName = HIP_HOP_RAPINSTRUMENTAL_HIP_HOP_STR),
		HIP_HOP_RAPSOUTHERN_HIP_HOP = Genre::HIP_HOP_RAPSOUTHERN_HIP_HOP 			UMETA(DisplayName = HIP_HOP_RAPSOUTHERN_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_90S = Genre::HIP_HOP_RAPHIP_HOP_90S 				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_90S_STR),
		HIP_HOP_RAPHIP_HOP_HITMAKERS = Genre::HIP_HOP_RAPHIP_HOP_HITMAKERS 			UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_HITMAKERS_STR),
		HIP_HOP_RAPWEST_COAST_HIP_HOP = Genre::HIP_HOP_RAPWEST_COAST_HIP_HOP 			UMETA(DisplayName = HIP_HOP_RAPWEST_COAST_HIP_HOP_STR),
		HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP = Genre::HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP	UMETA(DisplayName = HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_80S = Genre::HIP_HOP_RAPHIP_HOP_80S 				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_80S_STR),
		HIP_HOP_RAPEAST_COAST_HIP_HOP = Genre::HIP_HOP_RAPEAST_COAST_HIP_HOP 			UMETA(DisplayName = HIP_HOP_RAPEAST_COAST_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_00S = Genre::HIP_HOP_RAPHIP_HOP_00S 				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_00S_STR),
		HIP_HOP_RAPINTERNATIONAL_HIP_HOP = Genre::HIP_HOP_RAPINTERNATIONAL_HIP_HOP 		UMETA(DisplayName = HIP_HOP_RAPINTERNATIONAL_HIP_HOP_STR),
		HIP_HOP_RAPHIP_HOP_10S = Genre::HIP_HOP_RAPHIP_HOP_10S 				UMETA(DisplayName = HIP_HOP_RAPHIP_HOP_10S_STR),
		HIP_HOP_RAPOLD_SCHOOL_HIP_HOP = Genre::HIP_HOP_RAPOLD_SCHOOL_HIP_HOP 			UMETA(DisplayName = HIP_HOP_RAPOLD_SCHOOL_HIP_HOP_STR),
	};
}
namespace SubGenrePop{
	enum Type
	{
		//pop							
		POPPOP_00S = Genre::POPPOP_00S 					UMETA(DisplayName = POPPOP_00S_STR),
		POPPOP_90S = Genre::POPPOP_90S 					UMETA(DisplayName = POPPOP_90S_STR),
		POPPOP_10S = Genre::POPPOP_10S 					UMETA(DisplayName = POPPOP_10S_STR),
		POPPOP_80S = Genre::POPPOP_80S 					UMETA(DisplayName = POPPOP_80S_STR),
		POPDANCE_POP = Genre::POPDANCE_POP 					UMETA(DisplayName = POPDANCE_POP_STR),
		POPPOP_70S = Genre::POPPOP_70S 					UMETA(DisplayName = POPPOP_70S_STR),
		POPPOP_60S = Genre::POPPOP_60S 					UMETA(DisplayName = POPPOP_60S_STR),
		POPADULT_CONTEMPORARY = Genre::POPADULT_CONTEMPORARY 			UMETA(DisplayName = POPADULT_CONTEMPORARY_STR),
		POPTEEN_POP = Genre::POPTEEN_POP 					UMETA(DisplayName = POPTEEN_POP_STR),
		POPPOP_50S = Genre::POPPOP_50S 					UMETA(DisplayName = POPPOP_50S_STR),
	};
}
namespace SubGenreRock{
	enum Type
	{
		//rock							
		ROCKROCK_ROLL_10S = Genre::ROCKROCK_ROLL_10S 				UMETA(DisplayName = ROCKROCK_ROLL_10S_STR),
		ROCKROCK_ROLL_00S = Genre::ROCKROCK_ROLL_00S 				UMETA(DisplayName = ROCKROCK_ROLL_00S_STR),
		ROCKROCK_ROLL_90S = Genre::ROCKROCK_ROLL_90S 				UMETA(DisplayName = ROCKROCK_ROLL_90S_STR),
		ROCKROCK_ROLL_80S = Genre::ROCKROCK_ROLL_80S 				UMETA(DisplayName = ROCKROCK_ROLL_80S_STR),
		ROCKJAM_ROCK = Genre::ROCKJAM_ROCK 					UMETA(DisplayName = ROCKJAM_ROCK_STR),
		ROCKPROGRESSIVE_ART_ROCK = Genre::ROCKPROGRESSIVE_ART_ROCK 		UMETA(DisplayName = ROCKPROGRESSIVE_ART_ROCK_STR),
		ROCKHARD_ROCK = Genre::ROCKHARD_ROCK 					UMETA(DisplayName = ROCKHARD_ROCK_STR),
		ROCKCLASSIC_ROCK = Genre::ROCKCLASSIC_ROCK 				UMETA(DisplayName = ROCKCLASSIC_ROCK_STR),
		ROCKROCK_ROLL_70S = Genre::ROCKROCK_ROLL_70S 				UMETA(DisplayName = ROCKROCK_ROLL_70S_STR),
		ROCKSURF = Genre::ROCKSURF 						UMETA(DisplayName = ROCKSURF_STR),
		ROCKROCK_ROLL_60S = Genre::ROCKROCK_ROLL_60S 				UMETA(DisplayName = ROCKROCK_ROLL_60S_STR),
		ROCKPSYCHEDELIC_ROCK = Genre::ROCKPSYCHEDELIC_ROCK 			UMETA(DisplayName = ROCKPSYCHEDELIC_ROCK_STR),
		ROCKROCK_N_ROLL_50S = Genre::ROCKROCK_N_ROLL_50S 			UMETA(DisplayName = ROCKROCK_N_ROLL_50S_STR),
		ROCKSINGER_SONGWRITER = Genre::ROCKSINGER_SONGWRITER 			UMETA(DisplayName = ROCKSINGER_SONGWRITER_STR),
	};
}
namespace SubGenreAlternativeIndie{
	enum Type
	{
		//alternative/indie							
		ALTERNATIVE_INDIEALTERNATIVE_10S = Genre::ALTERNATIVE_INDIEALTERNATIVE_10S UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_10S_STR),
		ALTERNATIVE_INDIEEMO_HARDCORE = Genre::ALTERNATIVE_INDIEEMO_HARDCORE 	UMETA(DisplayName = ALTERNATIVE_INDIEEMO_HARDCORE_STR),
		ALTERNATIVE_INDIEALTERNATIVE_90S = Genre::ALTERNATIVE_INDIEALTERNATIVE_90S UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_90S_STR),
		ALTERNATIVE_INDIEALTERNATIVE_00S = Genre::ALTERNATIVE_INDIEALTERNATIVE_00S UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_00S_STR),
		ALTERNATIVE_INDIEALTERNATIVE_80S = Genre::ALTERNATIVE_INDIEALTERNATIVE_80S UMETA(DisplayName = ALTERNATIVE_INDIEALTERNATIVE_80S_STR),
		ALTERNATIVE_INDIEINDIE = Genre::ALTERNATIVE_INDIEINDIE 					UMETA(DisplayName = ALTERNATIVE_INDIEINDIE_STR),
		ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK = Genre::ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK UMETA(DisplayName = ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK_STR),
		ALTERNATIVE_INDIEGOTH_INDUSTRIAL = Genre::ALTERNATIVE_INDIEGOTH_INDUSTRIAL UMETA(DisplayName = ALTERNATIVE_INDIEGOTH_INDUSTRIAL_STR),
		ALTERNATIVE_INDIENEW_WAVE_POST_PUNK = Genre::ALTERNATIVE_INDIENEW_WAVE_POST_PUNK UMETA(DisplayName = ALTERNATIVE_INDIENEW_WAVE_POST_PUNK_STR),
		ALTERNATIVE_INDIEELECTROPOP = Genre::ALTERNATIVE_INDIEELECTROPOP 		UMETA(DisplayName = ALTERNATIVE_INDIEELECTROPOP_STR),
		ALTERNATIVE_INDIEPUNK = Genre::ALTERNATIVE_INDIEPUNK 					UMETA(DisplayName = ALTERNATIVE_INDIEPUNK_STR),
	};
}

//---------------------------SUBGENRES STRUCTURE---------------------------
namespace GenreNodes{
	struct node
	{
		Genre::Type id;
		float value;
		FString str;

		node(Genre::Type GenreId, float val, FString StringValue) :
			id(GenreId), value(val), str(StringValue){};
		node() /*: id(Genre::NO_GENRE), value(0.0f), str(FString(""))*/{}

		/*		//just to create a map
		const inline bool operator<(const node& rhs)
		{
		return id < rhs.id;
		}*/
	};

	static const float MIN_VALUE = 1.0f;

	static const node CHILDREN_MUSIC = node(Genre::CHILDREN_MUSIC, 1.0f, CHILDREN_MUSIC_STR);
	static const node NEW_AGE = node(Genre::NEW_AGE, 2.0f, NEW_AGE_STR);
	static const node HOLIDAY = node(Genre::HOLIDAY, 3.0f, HOLIDAY_STR);
	static const node VOCAL_EASY_LISTENING = node(Genre::VOCAL_EASY_LISTENING, 4.0f, VOCAL_EASY_LISTENING_STR);
	static const node BLUES = node(Genre::BLUES, 5.0f, BLUES_STR);
	static const node COMEDY_SPOKEN_WORD_OTHER = node(Genre::COMEDY_SPOKEN_WORD_OTHER, 6.0f, COMEDY_SPOKEN_WORD_OTHER_STR);
	static const node REGGAE_SKA = node(Genre::REGGAE_SKA, 7.0f, REGGAE_SKA_STR);
	static const node WORLD = node(Genre::WORLD, 8.0f, WORLD_STR);
	static const node SOUNDTRACKS_CAST_ALBUMS = node(Genre::SOUNDTRACKS_CAST_ALBUMS, 9.0f, SOUNDTRACKS_CAST_ALBUMS_STR);
	static const node JAZZ = node(Genre::JAZZ, 10.0f, JAZZ_STR);
	static const node LATIN = node(Genre::LATIN, 11.0f, LATIN_STR);
	static const node CHRISTIAN_GOSPEL = node(Genre::CHRISTIAN_GOSPEL, 12.0f, CHRISTIAN_GOSPEL_STR);
	static const node FOLK = node(Genre::FOLK, 13.0f, FOLK_STR);
	static const node COUNTRY = node(Genre::COUNTRY, 14.0f, COUNTRY_STR);
	static const node R_B_SOUL = node(Genre::R_B_SOUL, 15.0f, R_B_SOUL_STR);
	static const node DANCE_ELECTRONIC = node(Genre::DANCE_ELECTRONIC, 16.0f, DANCE_ELECTRONIC_STR);
	static const node METAL = node(Genre::METAL, 17.0f, METAL_STR);
	static const node HIP_HOP_RAP = node(Genre::HIP_HOP_RAP, 18.0f, HIP_HOP_RAP_STR);
	static const node POP = node(Genre::POP, 19.0f, POP_STR);
	static const node ROCK = node(Genre::ROCK, 20.0f, ROCK_STR);
	static const node ALTERNATIVE_INDIE = node(Genre::ALTERNATIVE_INDIE, 21.0f, ALTERNATIVE_INDIE_STR);

	static const float MAX_VALUE = 22.0f;
	//--------------------------------SUBGENRES--------------------------------							
	//new age							
	static const node NEW_AGENATURE_SOUNDS = node(Genre::NEW_AGENATURE_SOUNDS, NEW_AGE.value + 0.2f, FString(NEW_AGENATURE_SOUNDS_STR));
	static const node NEW_AGENEW_AGE_INSTRUMENTAL = node(Genre::NEW_AGENEW_AGE_INSTRUMENTAL, NEW_AGE.value + 0.4f, FString(NEW_AGENEW_AGE_INSTRUMENTAL_STR));
	static const node NEW_AGEGLOBAL_FUSION = node(Genre::NEW_AGEGLOBAL_FUSION, NEW_AGE.value + 0.6f, FString(NEW_AGEGLOBAL_FUSION_STR));

	//vocal/easy listening							
	static const node VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE = node(Genre::VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE, VOCAL_EASY_LISTENING.value + 0.5f, FString(VOCAL_EASY_LISTENINGCOCKTAIL_LOUNGE_STR));

	//blues	
	static const node BLUESDELTA_BLUES = node(Genre::BLUESDELTA_BLUES, BLUES.value + 0.15 * 1, FString(BLUESDELTA_BLUES_STR));
	static const node BLUESCOUNTRY_BLUES = node(Genre::BLUESCOUNTRY_BLUES, BLUES.value + 0.15 * 2, FString(BLUESCOUNTRY_BLUES_STR));
	static const node BLUESACOUSTIC_FOLK_BLUES = node(Genre::BLUESACOUSTIC_FOLK_BLUES, BLUES.value + 0.15 * 3, FString(BLUESACOUSTIC_FOLK_BLUES_STR));
	static const node BLUESCHICAGO_BLUES = node(Genre::BLUESCHICAGO_BLUES, BLUES.value + 0.15 * 4, FString(BLUESCHICAGO_BLUES_STR));
	static const node BLUESCLASSIC_BLUES = node(Genre::BLUESCLASSIC_BLUES, BLUES.value + 0.15 * 5, FString(BLUESCLASSIC_BLUES_STR));
	static const node BLUESELECTRIC_BLUES = node(Genre::BLUESELECTRIC_BLUES, BLUES.value + 0.15 * 6, FString(BLUESELECTRIC_BLUES_STR));

	//comedy							
	static const node COMEDY_SPOKEN_WORD_OTHERHORSPIELE = node(Genre::COMEDY_SPOKEN_WORD_OTHERHORSPIELE, COMEDY_SPOKEN_WORD_OTHER.value + 0.25 * 1, FString(COMEDY_SPOKEN_WORD_OTHERHORSPIELE_STR));
	static const node COMEDY_SPOKEN_WORD_OTHERNOVELTY = node(Genre::COMEDY_SPOKEN_WORD_OTHERNOVELTY, COMEDY_SPOKEN_WORD_OTHER.value + 0.25 * 2, FString(COMEDY_SPOKEN_WORD_OTHERNOVELTY_STR));
	static const node COMEDY_SPOKEN_WORD_OTHERSTANDUP = node(Genre::COMEDY_SPOKEN_WORD_OTHERSTANDUP, COMEDY_SPOKEN_WORD_OTHER.value + 0.25 * 3, FString(COMEDY_SPOKEN_WORD_OTHERSTANDUP_STR));

	//reggae ska
	static const node REGGAE_SKAREGGAE_SKA_DANCEHALL = node(Genre::REGGAE_SKAREGGAE_SKA_DANCEHALL, REGGAE_SKA.value + 0.25 * 1, FString(REGGAE_SKAREGGAE_SKA_DANCEHALL_STR));
	static const node REGGAE_SKAREGGAE_SKA_DUB = node(Genre::REGGAE_SKAREGGAE_SKA_DUB, REGGAE_SKA.value + 0.25 * 2, FString(REGGAE_SKAREGGAE_SKA_DUB_STR));
	static const node REGGAE_SKAREGGAE_SKA_ROCKSTEADY = node(Genre::REGGAE_SKAREGGAE_SKA_ROCKSTEADY, REGGAE_SKA.value + 0.25 * 3, FString(REGGAE_SKAREGGAE_SKA_ROCKSTEADY_STR));

	//world							
	static const node WORLDASIA = node(Genre::WORLDASIA, WORLD.value + 0.06 * 1, FString(WORLDASIA_STR));
	static const node WORLDAUSTRALIA_SOUTH_PACIFIC = node(Genre::WORLDAUSTRALIA_SOUTH_PACIFIC, WORLD.value + 0.06 * 2, FString(WORLDAUSTRALIA_SOUTH_PACIFIC_STR));
	static const node WORLDWORLD_POP = node(Genre::WORLDWORLD_POP, WORLD.value + 0.06 * 3, FString(WORLDWORLD_POP_STR));
	static const node WORLDMIDDLE_EASTERN = node(Genre::WORLDMIDDLE_EASTERN, WORLD.value + 0.06 * 4, FString(WORLDMIDDLE_EASTERN_STR));
	static const node WORLDSOUTH_AMERICA = node(Genre::WORLDSOUTH_AMERICA, WORLD.value + 0.06 * 5, FString(WORLDSOUTH_AMERICA_STR));
	static const node WORLDHAWAII = node(Genre::WORLDHAWAII, WORLD.value + 0.06 * 6, FString(WORLDHAWAII_STR));
	static const node WORLDCELTIC = node(Genre::WORLDCELTIC, WORLD.value + 0.06 * 7, FString(WORLDCELTIC_STR));
	static const node WORLDAFRICA = node(Genre::WORLDAFRICA, WORLD.value + 0.06 * 8, FString(WORLDAFRICA_STR));
	static const node WORLDCARIBBEAN = node(Genre::WORLDCARIBBEAN, WORLD.value + 0.06 * 9, FString(WORLDCARIBBEAN_STR));
	static const node WORLDSOUTH_ASIA = node(Genre::WORLDSOUTH_ASIA, WORLD.value + 0.06 * 10, FString(WORLDSOUTH_ASIA_STR));
	static const node WORLDNORTH_AMERICA = node(Genre::WORLDNORTH_AMERICA, WORLD.value + 0.06 * 11, FString(WORLDNORTH_AMERICA_STR));
	static const node WORLDBRAZIL = node(Genre::WORLDBRAZIL, WORLD.value + 0.06 * 12, FString(WORLDBRAZIL_STR));
	static const node WORLDEUROPE = node(Genre::WORLDEUROPE, WORLD.value + 0.06 * 13, FString(WORLDEUROPE_STR));

	//soundtracks							
	static const node SOUNDTRACKS_CAST_ALBUMSFILM_SCORES = node(Genre::SOUNDTRACKS_CAST_ALBUMSFILM_SCORES, SOUNDTRACKS_CAST_ALBUMS.value + 0.3, FString(SOUNDTRACKS_CAST_ALBUMSFILM_SCORES_STR));
	static const node SOUNDTRACKS_CAST_ALBUMSMUSICALS = node(Genre::SOUNDTRACKS_CAST_ALBUMSMUSICALS, SOUNDTRACKS_CAST_ALBUMS.value + 0.6, FString(SOUNDTRACKS_CAST_ALBUMSMUSICALS_STR));

	//jazz							
	static const node JAZZFUSION_JAZZ = node(Genre::JAZZFUSION_JAZZ, JAZZ.value + 0.06 * 1, FString(JAZZFUSION_JAZZ_STR));
	static const node JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV = node(Genre::JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV, JAZZ.value + 0.06 * 2, FString(JAZZAVANT_GARDE_EXPERIMENTAL_IMPRV_STR));
	static const node JAZZCONTEMPORARY_JAZZ = node(Genre::JAZZCONTEMPORARY_JAZZ, JAZZ.value + 0.06 * 3, FString(JAZZCONTEMPORARY_JAZZ_STR));
	static const node JAZZSMOOTH_JAZZ = node(Genre::JAZZSMOOTH_JAZZ, JAZZ.value + 0.06 * 4, FString(JAZZSMOOTH_JAZZ_STR));
	static const node JAZZNEW_ORLEANS_JAZZ = node(Genre::JAZZNEW_ORLEANS_JAZZ, JAZZ.value + 0.06 * 5, FString(JAZZNEW_ORLEANS_JAZZ_STR));
	static const node JAZZSWING = node(Genre::JAZZSWING, JAZZ.value + 0.06 * 6, FString(JAZZSWING_STR));
	static const node JAZZLATIN_JAZZ = node(Genre::JAZZLATIN_JAZZ, JAZZ.value + 0.06 * 7, FString(JAZZLATIN_JAZZ_STR));
	static const node JAZZBOP_JAZZ = node(Genre::JAZZBOP_JAZZ, JAZZ.value + 0.06 * 8, FString(JAZZBOP_JAZZ_STR));
	static const node JAZZCOOL_WEST_COAST_JAZZ = node(Genre::JAZZCOOL_WEST_COAST_JAZZ, JAZZ.value + 0.06 * 9, FString(JAZZCOOL_WEST_COAST_JAZZ_STR));
	static const node JAZZVOCALS = node(Genre::JAZZVOCALS, JAZZ.value + 0.06 * 10, FString(JAZZVOCALS_STR));
	static const node JAZZBIG_BAND = node(Genre::JAZZBIG_BAND, JAZZ.value + 0.06 * 11, FString(JAZZBIG_BAND_STR));

	//folk	
	static const node FOLKNEO_FOLK = node(Genre::FOLKNEO_FOLK, FOLK.value + 0.15 * 1, FString(FOLKNEO_FOLK_STR));
	static const node FOLKFOLK_ROCK = node(Genre::FOLKFOLK_ROCK, FOLK.value + 0.15 * 2, FString(FOLKFOLK_ROCK_STR));
	static const node FOLKCELTIC_FOLK = node(Genre::FOLKCELTIC_FOLK, FOLK.value + 0.15 * 3, FString(FOLKCELTIC_FOLK_STR));
	static const node FOLKCAJUN_ZYDECO = node(Genre::FOLKCAJUN_ZYDECO, FOLK.value + 0.15 * 4, FString(FOLKCAJUN_ZYDECO_STR));
	static const node FOLKACOUSTIC = node(Genre::FOLKACOUSTIC, FOLK.value + 0.15 * 5, FString(FOLKACOUSTIC_STR));

	//country
	static const node COUNTRYNEW_TRADITIONAL = node(Genre::COUNTRYNEW_TRADITIONAL, COUNTRY.value + 0.125 * 1, FString(COUNTRYNEW_TRADITIONAL_STR));
	static const node COUNTRYALT_COUNTRY = node(Genre::COUNTRYALT_COUNTRY, COUNTRY.value + 0.125 * 2, FString(COUNTRYALT_COUNTRY_STR));
	static const node COUNTRYBLUEGRASS = node(Genre::COUNTRYBLUEGRASS, COUNTRY.value + 0.125 * 3, FString(COUNTRYBLUEGRASS_STR));
	static const node COUNTRYROCKABILLY = node(Genre::COUNTRYROCKABILLY, COUNTRY.value + 0.125 * 4, FString(COUNTRYROCKABILLY_STR));
	static const node COUNTRYCOUNTRY_POP = node(Genre::COUNTRYCOUNTRY_POP, COUNTRY.value + 0.125 * 5, FString(COUNTRYCOUNTRY_POP_STR));
	static const node COUNTRYCLASSIC_COUNTRY = node(Genre::COUNTRYCLASSIC_COUNTRY, COUNTRY.value + 0.125 * 6, FString(COUNTRYCLASSIC_COUNTRY_STR));

	//R&B soul	
	static const node R_B_SOULURBAN_ADULT_CONTEMPORARY = node(Genre::R_B_SOULURBAN_ADULT_CONTEMPORARY, R_B_SOUL.value + 0.1 * 1, FString(R_B_SOULURBAN_ADULT_CONTEMPORARY_STR));
	static const node R_B_SOULNEO_SOUL = node(Genre::R_B_SOULNEO_SOUL, R_B_SOUL.value + 0.1 * 2, FString(R_B_SOULNEO_SOUL_STR));
	static const node R_B_SOULDISCO = node(Genre::R_B_SOULDISCO, R_B_SOUL.value + 0.1 * 3, FString(R_B_SOULDISCO_STR));
	static const node R_B_SOULCONTEMPORARY_R_B = node(Genre::R_B_SOULCONTEMPORARY_R_B, R_B_SOUL.value + 0.1 * 4, FString(R_B_SOULCONTEMPORARY_R_B_STR));
	static const node R_B_SOULFUNK = node(Genre::R_B_SOULFUNK, R_B_SOUL.value + 0.1 * 5, FString(R_B_SOULFUNK_STR));
	static const node R_B_SOULCLASSIC_SOUL = node(Genre::R_B_SOULCLASSIC_SOUL, R_B_SOUL.value + 0.1 * 6, FString(R_B_SOULCLASSIC_SOUL_STR));
	static const node R_B_SOULCLASSIC_R_B = node(Genre::R_B_SOULCLASSIC_R_B, R_B_SOUL.value + 0.1 * 7, FString(R_B_SOULCLASSIC_R_B_STR));
	static const node R_B_SOULDOO_WOP = node(Genre::R_B_SOULDOO_WOP, R_B_SOUL.value + 0.1 * 8, FString(R_B_SOULDOO_WOP_STR));

	//dance/electronic							
	static const node DANCE_ELECTRONICDUBSTEP = node(Genre::DANCE_ELECTRONICDUBSTEP, DANCE_ELECTRONIC.value + 0.08 * 1, FString(DANCE_ELECTRONICDUBSTEP_STR));
	static const node DANCE_ELECTRONICHARDCORE = node(Genre::DANCE_ELECTRONICHARDCORE, DANCE_ELECTRONIC.value + 0.08 * 2, FString(DANCE_ELECTRONICHARDCORE_STR));
	static const node DANCE_ELECTRONICBREAKBEAT = node(Genre::DANCE_ELECTRONICBREAKBEAT, DANCE_ELECTRONIC.value + 0.08 * 3, FString(DANCE_ELECTRONICBREAKBEAT_STR));
	static const node DANCE_ELECTRONICJUNGLE_DRUM_BASS = node(Genre::DANCE_ELECTRONICJUNGLE_DRUM_BASS, DANCE_ELECTRONIC.value + 0.08 * 4, FString(DANCE_ELECTRONICJUNGLE_DRUM_BASS_STR));
	static const node DANCE_ELECTRONICDOWNTEMPO = node(Genre::DANCE_ELECTRONICDOWNTEMPO, DANCE_ELECTRONIC.value + 0.08 * 5, FString(DANCE_ELECTRONICDOWNTEMPO_STR));
	static const node DANCE_ELECTRONICELECTRONICA = node(Genre::DANCE_ELECTRONICELECTRONICA, DANCE_ELECTRONIC.value + 0.08 * 6, FString(DANCE_ELECTRONICELECTRONICA_STR));
	static const node DANCE_ELECTRONICHOUSE = node(Genre::DANCE_ELECTRONICHOUSE, DANCE_ELECTRONIC.value + 0.08 * 7, FString(DANCE_ELECTRONICHOUSE_STR));
	static const node DANCE_ELECTRONICTECHNO = node(Genre::DANCE_ELECTRONICTECHNO, DANCE_ELECTRONIC.value + 0.08 * 8, FString(DANCE_ELECTRONICTECHNO_STR));
	static const node DANCE_ELECTRONICTRANCE = node(Genre::DANCE_ELECTRONICTRANCE, DANCE_ELECTRONIC.value + 0.08 * 9, FString(DANCE_ELECTRONICTRANCE_STR));
	static const node DANCE_ELECTRONICAMBIENT = node(Genre::DANCE_ELECTRONICAMBIENT, DANCE_ELECTRONIC.value + 0.08 * 10, FString(DANCE_ELECTRONICAMBIENT_STR));

	//metal		
	static const node METALINDUSTRIAL = node(Genre::METALINDUSTRIAL, METAL.value + 0.09 * 1, FString(METALINDUSTRIAL_STR));
	static const node METALMETALCORE = node(Genre::METALMETALCORE, METAL.value + 0.09 * 2, FString(METALMETALCORE_STR));
	static const node METALPROGRESSIVE_METAL = node(Genre::METALPROGRESSIVE_METAL, METAL.value + 0.09 * 3, FString(METALPROGRESSIVE_METAL_STR));
	static const node METALDOOM_METAL = node(Genre::METALDOOM_METAL, METAL.value + 0.09 * 4, FString(METALDOOM_METAL_STR));
	static const node METALTHRASH = node(Genre::METALTHRASH, METAL.value + 0.09 * 5, FString(METALTHRASH_STR));
	static const node METALBLACK_DEATH_METAL = node(Genre::METALBLACK_DEATH_METAL, METAL.value + 0.09 * 6, FString(METALBLACK_DEATH_METAL_STR));
	static const node METALHAIR_METAL = node(Genre::METALHAIR_METAL, METAL.value + 0.09 * 7, FString(METALHAIR_METAL_STR));
	static const node METALALT_METAL = node(Genre::METALALT_METAL, METAL.value + 0.09 * 8, FString(METALALT_METAL_STR));
	static const node METALCLASSIC_METAL = node(Genre::METALCLASSIC_METAL, METAL.value + 0.09 * 9, FString(METALCLASSIC_METAL_STR));

	//hip-hop	
	static const node HIP_HOP_RAPMIDWEST_HIP_HOP = node(Genre::HIP_HOP_RAPMIDWEST_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 1, FString(HIP_HOP_RAPMIDWEST_HIP_HOP_STR));
	static const node HIP_HOP_RAPINSTRUMENTAL_HIP_HOP = node(Genre::HIP_HOP_RAPINSTRUMENTAL_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 2, FString(HIP_HOP_RAPINSTRUMENTAL_HIP_HOP_STR));
	static const node HIP_HOP_RAPSOUTHERN_HIP_HOP = node(Genre::HIP_HOP_RAPSOUTHERN_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 3, FString(HIP_HOP_RAPSOUTHERN_HIP_HOP_STR));
	static const node HIP_HOP_RAPHIP_HOP_90S = node(Genre::HIP_HOP_RAPHIP_HOP_90S, HIP_HOP_RAP.value + 0.05 * 4, FString(HIP_HOP_RAPHIP_HOP_90S_STR));
	static const node HIP_HOP_RAPHIP_HOP_HITMAKERS = node(Genre::HIP_HOP_RAPHIP_HOP_HITMAKERS, HIP_HOP_RAP.value + 0.05 * 5, FString(HIP_HOP_RAPHIP_HOP_HITMAKERS_STR));
	static const node HIP_HOP_RAPWEST_COAST_HIP_HOP = node(Genre::HIP_HOP_RAPWEST_COAST_HIP_HOP, HIP_HOP_RAP.value + 0.05 * +6, FString(HIP_HOP_RAPWEST_COAST_HIP_HOP_STR));
	static const node HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP = node(Genre::HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 7, FString(HIP_HOP_RAPINDIE_UNDERGROUND_HIP_HOP_STR));
	static const node HIP_HOP_RAPHIP_HOP_80S = node(Genre::HIP_HOP_RAPHIP_HOP_80S, HIP_HOP_RAP.value + 0.05 * 8, FString(HIP_HOP_RAPHIP_HOP_80S_STR));
	static const node HIP_HOP_RAPEAST_COAST_HIP_HOP = node(Genre::HIP_HOP_RAPEAST_COAST_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 9, FString(HIP_HOP_RAPEAST_COAST_HIP_HOP_STR));
	static const node HIP_HOP_RAPHIP_HOP_00S = node(Genre::HIP_HOP_RAPHIP_HOP_00S, HIP_HOP_RAP.value + 0.05 * 10, FString(HIP_HOP_RAPHIP_HOP_00S_STR));
	static const node HIP_HOP_RAPINTERNATIONAL_HIP_HOP = node(Genre::HIP_HOP_RAPINTERNATIONAL_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 11, FString(HIP_HOP_RAPINTERNATIONAL_HIP_HOP_STR));
	static const node HIP_HOP_RAPHIP_HOP_10S = node(Genre::HIP_HOP_RAPHIP_HOP_10S, HIP_HOP_RAP.value + 0.05 * 12, FString(HIP_HOP_RAPHIP_HOP_10S_STR));
	static const node HIP_HOP_RAPOLD_SCHOOL_HIP_HOP = node(Genre::HIP_HOP_RAPOLD_SCHOOL_HIP_HOP, HIP_HOP_RAP.value + 0.05 * 13, FString(HIP_HOP_RAPOLD_SCHOOL_HIP_HOP_STR));

	//pop
	static const node POPPOP_00S = node(Genre::POPPOP_00S, POP.value + 0.08 * 1, FString(POPPOP_00S_STR));
	static const node POPPOP_90S = node(Genre::POPPOP_90S, POP.value + 0.08 * 2, FString(POPPOP_90S_STR));
	static const node POPPOP_10S = node(Genre::POPPOP_10S, POP.value + 0.08 * 3, FString(POPPOP_10S_STR));
	static const node POPPOP_80S = node(Genre::POPPOP_80S, POP.value + 0.08 * 4, FString(POPPOP_80S_STR));
	static const node POPDANCE_POP = node(Genre::POPDANCE_POP, POP.value + 0.08 * 5, FString(POPDANCE_POP_STR));
	static const node POPPOP_70S = node(Genre::POPPOP_70S, POP.value + 0.08 * 6, FString(POPPOP_70S_STR));
	static const node POPPOP_60S = node(Genre::POPPOP_60S, POP.value + 0.08 * 7, FString(POPPOP_60S_STR));
	static const node POPADULT_CONTEMPORARY = node(Genre::POPADULT_CONTEMPORARY, POP.value + 0.08 * 8, FString(POPADULT_CONTEMPORARY_STR));
	static const node POPTEEN_POP = node(Genre::POPTEEN_POP, POP.value + 0.08 * 9, FString(POPTEEN_POP_STR));
	static const node POPPOP_50S = node(Genre::POPPOP_50S, POP.value + 0.08 * 10, FString(POPPOP_50S_STR));

	//rock
	static const node ROCKROCK_ROLL_10S = node(Genre::ROCKROCK_ROLL_10S, ROCK.value + 0.05 * 1, FString(ROCKROCK_ROLL_10S_STR));
	static const node ROCKROCK_ROLL_00S = node(Genre::ROCKROCK_ROLL_00S, ROCK.value + 0.05 * 2, FString(ROCKROCK_ROLL_00S_STR));
	static const node ROCKROCK_ROLL_90S = node(Genre::ROCKROCK_ROLL_90S, ROCK.value + 0.05 * 3, FString(ROCKROCK_ROLL_90S_STR));
	static const node ROCKROCK_ROLL_80S = node(Genre::ROCKROCK_ROLL_80S, ROCK.value + 0.05 * 4, FString(ROCKROCK_ROLL_80S_STR));
	static const node ROCKJAM_ROCK = node(Genre::ROCKJAM_ROCK, ROCK.value + 0.05 * 5, FString(ROCKJAM_ROCK_STR));
	static const node ROCKPROGRESSIVE_ART_ROCK = node(Genre::ROCKPROGRESSIVE_ART_ROCK, ROCK.value + 0.05 * 6, FString(ROCKPROGRESSIVE_ART_ROCK_STR));
	static const node ROCKHARD_ROCK = node(Genre::ROCKHARD_ROCK, ROCK.value + 0.05 * 7, FString(ROCKHARD_ROCK_STR));
	static const node ROCKCLASSIC_ROCK = node(Genre::ROCKCLASSIC_ROCK, ROCK.value + 0.05 * 8, FString(ROCKCLASSIC_ROCK_STR));
	static const node ROCKROCK_ROLL_70S = node(Genre::ROCKROCK_ROLL_70S, ROCK.value + 0.05 * 9, FString(ROCKROCK_ROLL_70S_STR));
	static const node ROCKSURF = node(Genre::ROCKSURF, ROCK.value + 0.05 * 10, FString(ROCKSURF_STR));
	static const node ROCKROCK_ROLL_60S = node(Genre::ROCKROCK_ROLL_60S, ROCK.value + 0.05 * 11, FString(ROCKROCK_ROLL_60S_STR));
	static const node ROCKPSYCHEDELIC_ROCK = node(Genre::ROCKPSYCHEDELIC_ROCK, ROCK.value + 0.05 * 12, FString(ROCKPSYCHEDELIC_ROCK_STR));
	static const node ROCKROCK_N_ROLL_50S = node(Genre::ROCKROCK_N_ROLL_50S, ROCK.value + 0.05 * 13, FString(ROCKROCK_N_ROLL_50S_STR));
	static const node ROCKSINGER_SONGWRITER = node(Genre::ROCKSINGER_SONGWRITER, ROCK.value + 0.05 * 14, FString(ROCKSINGER_SONGWRITER_STR));

	//alternative/indie	
	static const node ALTERNATIVE_INDIEALTERNATIVE_10S = node(Genre::ALTERNATIVE_INDIEALTERNATIVE_10S, ALTERNATIVE_INDIE.value + 0.075 * 1, FString(ALTERNATIVE_INDIEALTERNATIVE_10S_STR));
	static const node ALTERNATIVE_INDIEEMO_HARDCORE = node(Genre::ALTERNATIVE_INDIEEMO_HARDCORE, ALTERNATIVE_INDIE.value + 0.075 * 2, FString(ALTERNATIVE_INDIEEMO_HARDCORE_STR));
	static const node ALTERNATIVE_INDIEALTERNATIVE_90S = node(Genre::ALTERNATIVE_INDIEALTERNATIVE_90S, ALTERNATIVE_INDIE.value + 0.075 * 3, FString(ALTERNATIVE_INDIEALTERNATIVE_90S_STR));
	static const node ALTERNATIVE_INDIEALTERNATIVE_00S = node(Genre::ALTERNATIVE_INDIEALTERNATIVE_00S, ALTERNATIVE_INDIE.value + 0.075 * 4, FString(ALTERNATIVE_INDIEALTERNATIVE_00S_STR));
	static const node ALTERNATIVE_INDIEALTERNATIVE_80S = node(Genre::ALTERNATIVE_INDIEALTERNATIVE_80S, ALTERNATIVE_INDIE.value + 0.075 * 5, FString(ALTERNATIVE_INDIEALTERNATIVE_80S_STR));
	static const node ALTERNATIVE_INDIEINDIE = node(Genre::ALTERNATIVE_INDIEINDIE, ALTERNATIVE_INDIE.value + 0.075 * 6, FString(ALTERNATIVE_INDIEINDIE_STR));
	static const node ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK = node(Genre::ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK, ALTERNATIVE_INDIE.value + 0.075 * 7, FString(ALTERNATIVE_INDIEBRIT_POP_BRI_ROCK_STR));
	static const node ALTERNATIVE_INDIEGOTH_INDUSTRIAL = node(Genre::ALTERNATIVE_INDIEGOTH_INDUSTRIAL, ALTERNATIVE_INDIE.value + 0.075 * 8, FString(ALTERNATIVE_INDIEGOTH_INDUSTRIAL_STR));
	static const node ALTERNATIVE_INDIENEW_WAVE_POST_PUNK = node(Genre::ALTERNATIVE_INDIENEW_WAVE_POST_PUNK, ALTERNATIVE_INDIE.value + 0.075 * 9, FString(ALTERNATIVE_INDIENEW_WAVE_POST_PUNK_STR));
	static const node ALTERNATIVE_INDIEELECTROPOP = node(Genre::ALTERNATIVE_INDIEELECTROPOP, ALTERNATIVE_INDIE.value + 0.075 * 10, FString(ALTERNATIVE_INDIEELECTROPOP_STR));
	static const node ALTERNATIVE_INDIEPUNK = node(Genre::ALTERNATIVE_INDIEPUNK, ALTERNATIVE_INDIE.value + 0.075 * 11, FString(ALTERNATIVE_INDIEPUNK_STR));
}